var N = null;var searchIndex = {};
searchIndex["aw_fel"]={"doc":"Allwinner FEL library.","items":[[3,"FelHandle","aw_fel","FEL device handle.",N,N],[12,"usb_handle","","",0,N],[12,"soc_version","","",0,N],[12,"soc_info","","",0,N],[3,"UsbHandle","","USB device handle.",N,N],[12,"device_handle","","",1,N],[12,"endpoint_in","","",1,N],[12,"endpoint_out","","",1,N],[12,"iface_detached","","",1,N],[3,"Fel","","Allwinner FEL devices context.",N,N],[12,"context","","",2,N],[4,"FelError","","FEL errors.",N,N],[13,"Response","","USB response error.",3,N],[12,"expected","aw_fel::FelError","Expected string.",3,N],[12,"found","","Found string.",3,N],[13,"UnsupportedDevId","aw_fel","Unsupported device ID.",3,N],[12,"id","aw_fel::FelError","Unsupported device ID.",3,N],[13,"SPLHeader","aw_fel","SPL header error.",3,N],[12,"msg","aw_fel::FelError","SPL header error message.",3,N],[5,"u32_as_u8","aw_fel","Converts a reference to a `u32` slice to a reference to a `u8` slice.",N,N],[5,"u32_as_u8_mut","","Converts a mutable reference to a `u32` slice to a mutable reference to a `u8` slice.",N,N],[0,"soc","","SoC module.",N,N],[3,"Version","aw_fel::soc","SoC version information, as retrieved by the FEL protocol",N,N],[12,"signature","","",4,N],[12,"soc_id","","`0x00162300`.",4,N],[12,"protocol","","`1`.",4,N],[12,"scratchpad","","`0x7e00`.",4,N],[3,"SRAMSwapBuffers","","SRAM buffers.",N,N],[12,"buf1","","BROM buffer.",5,N],[12,"buf2","","Backup storage location.",5,N],[12,"size","","Buffer size.",5,N],[3,"Info","","SoC information structure.",N,N],[12,"soc_id","","ID of the SoC.",6,N],[12,"name","","Human-readable SoC name string.",6,N],[12,"spl_addr","","SPL load address.",6,N],[12,"scratch_addr","","A safe place to upload & run code.",6,N],[12,"thunk_addr","","Address of the thunk code.",6,N],[12,"thunk_size","","Maximal size of the thunk code.",6,N],[12,"needs_l2en","","Set the `L2EN` bit.",6,N],[12,"mmu_tt_addr","","MMU translation table address.",6,N],[12,"sid_addr","","Base address for `SID_KEY[0-3]` registers.",6,N],[12,"rvbar_reg","","MMIO address of `RVBARADDR0_L` register.",6,N],[12,"swap_buffers","","SRAM buffers.",6,N],[5,"get_soc_name_from_id","","Gets the SoC name from the given ID, if supported.",N,[[["u32"]],["option",["str"]]]],[17,"A10_A13_A20_SRAM_SWAP_BUFFERS","","Allwinner A10, A13 and A20 SRAM swap buffers.",N,N],[17,"A31_SRAM_SWAP_BUFFERS","","Allwinner A31 SRAM swap buffers.",N,N],[17,"A64_SRAM_SWAP_BUFFERS","","Allwinner A64 SRAM swap buffers.",N,N],[17,"AR100_ABUSING_SRAM_SWAP_BUFFERS","","AR100 SRAM swap buffers.",N,N],[17,"A80_SRAM_SWAP_BUFFERS","","A80 SRAM swap buffers.",N,N],[17,"SOC_INFO_TABLE","","Table with all the supported SoCs.",N,N],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"clone","","",4,[[["self"]],["version"]]],[11,"eq","","",4,[[["self"],["version"]],["bool"]]],[11,"ne","","",4,[[["self"],["version"]],["bool"]]],[11,"assert_receiver_is_total_eq","","",4,N],[11,"from_bytes","","Generates a SoC version information structure from the bytes response.",4,N],[11,"get_id","","Gets the SoC ID.",4,[[["self"]],["u32"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"clone","","",5,[[["self"]],["sramswapbuffers"]]],[11,"eq","","",5,[[["self"],["sramswapbuffers"]],["bool"]]],[11,"ne","","",5,[[["self"],["sramswapbuffers"]],["bool"]]],[11,"assert_receiver_is_total_eq","","",5,N],[11,"get_buf1","","Gets the BROM buffer.",5,[[["self"]],["u32"]]],[11,"get_buf2","","Gets the backup storage location.",5,[[["self"]],["u32"]]],[11,"get_size","","Gets the buffer size.",5,[[["self"]],["u32"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"eq","","",6,[[["self"],["info"]],["bool"]]],[11,"ne","","",6,[[["self"],["info"]],["bool"]]],[11,"clone","","",6,[[["self"]],["info"]]],[11,"from_id","","Gets the SoC information structure for the given ID, if supported.",6,[[["u32"]],["option"]]],[11,"from_version","","Gets the SoC information structure from the givern `SoCVersion`, if supported.",6,[[["version"]],["option"]]],[11,"get_soc_id","","Gets the SoC ID.",6,[[["self"]],["u32"]]],[11,"get_name","","Gets the name of the SoC.",6,[[["self"]],["str"]]],[11,"get_spl_addr","","Gets the SPL load address for the SoC.",6,[[["self"]],["u32"]]],[11,"get_scratch_addr","","Gets the scratch address.",6,[[["self"]],["u32"]]],[11,"get_thunk_addr","","Gets the address of the thunk code.",6,[[["self"]],["u32"]]],[11,"get_thunk_size","","Gets the size of the thunk code.",6,[[["self"]],["u32"]]],[11,"needs_l2en","","",6,[[["self"]],["bool"]]],[11,"get_mmu_tt_addr","","Gets the MMU translation table address.",6,[[["self"]],["option",["u32"]]]],[11,"get_sid_addr","","Gets the `SID` register address.",6,[[["self"]],["option",["u32"]]]],[11,"get_rvbar_reg","","Get the `RVBAR` register address, if supported.",6,[[["self"]],["option",["u32"]]]],[11,"get_swap_buffers","","Gets the SoC swap buffers.",6,N],[0,"uboot","aw_fel","",N,N],[4,"UbootImageType","aw_fel::uboot","U-boot image type.",N,N],[13,"Firmware","","Firmware image.",7,N],[13,"Script","","Script file.",7,N],[5,"get_image_type","","Utility function to determine the image type from a mkimage-compatible header at given buffer.",N,N],[0,"fel2spl_thunk","","",N,N],[17,"FEL_TO_SPL_THUNK","aw_fel::uboot::fel2spl_thunk","",N,N],[17,"UBOOT_IH_NMLEN","aw_fel::uboot","U-boot image name length.",N,N],[17,"UBOOT_IH_MAGIC","","U-Boot image magic number.",N,N],[17,"UBOOT_IH_ARCH_ARM","","ARM architechture constant in U-Boot.",N,N],[17,"UBOOT_HEADER_NAME_OFFSET","","Offset of name field.",N,N],[17,"UBOOT_HEADER_SIZE","","Header of the U-Boot header.",N,N],[11,"clone","","",7,[[["self"]],["ubootimagetype"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"eq","","",7,[[["self"],["ubootimagetype"]],["bool"]]],[11,"assert_receiver_is_total_eq","","",7,N],[11,"from_byte","","",7,[[["u8"]],["result",["error"]]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"write_uboot_image","aw_fel","This function tests a given buffer for a valid U-Boot image. Upon success, the image data gets transferred to the default memory address stored within the image header; and the function returns the U-Boot entry point (offset) and size values, in that order.",0,N],[11,"write_and_execute_spl","","Writes U-Boot SPL into memory and executes it.",0,N],[17,"_DERIVE_failure_Fail_FOR_FelError","","",N,N],[17,"_DERIVE_failure_core_fmt_Display_FOR_FelError","","",N,N],[17,"SPL_LEN_LIMIT","","Maximum size of SPL, at the same time this is the start offset of the main U-Boot image within `u-boot-sunxi-with-spl.bin`.",N,N],[17,"USB_TIMEOUT","","USB timeout (in seconds).",N,N],[17,"AW_USB_MAX_BULK_SEND","","`AW_USB_MAX_BULK_SEND` and the timeout constant `USB_TIMEOUT` are related. Both need to be selected in a way that transferring the maximum chunk size with (SoC-specific) slow transfer speed won't time out.",N,N],[17,"AW_VENDOR_ID","","Allwinner FEL device USB vendor ID.",N,N],[17,"AW_PRODUCT_ID","","Allwinner FEL device USB product ID.",N,N],[17,"AW_USB_READ","","Allwinner USB read request.",N,N],[17,"AW_USB_WRITE","","Allwinner USB write request.",N,N],[17,"AW_FEL_VERSION","","Allwinner FEL version request.",N,N],[17,"AW_FEL_1_WRITE","","Allwinner FEL write request.",N,N],[17,"AW_FEL_1_EXEC","","Allwinner FEL execution request.",N,N],[17,"AW_FEL_1_READ","","Allwinner FEL read request.",N,N],[17,"LCODE_ARM_RW_WORDS","","Word count of the `[read/write]_words()` scratch code.",N,N],[17,"LCODE_ARM_RMR_WORDS","","Word count of the `rmr_request` scratch code.",N,N],[17,"LCODE_ARM_RW_SIZE","","Code size in bytes.",N,N],[17,"LCODE_MAX_TOTAL","","Maximum total words in buffer.",N,N],[17,"LCODE_MAX_RW_WORDS","","Data words for read/write requests.",N,N],[17,"DRAM_BASE","","DRAM base address.",N,N],[17,"DRAM_SIZE","","DRAM size, in bytes.",N,N],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"eq","","",3,[[["self"],["felerror"]],["bool"]]],[11,"ne","","",3,[[["self"],["felerror"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"get_soc_info","","Gets the SoC information from the FEL device.",0,[[["self"]],["info"]]],[11,"get_version_info","","Gets the SoC version information from the FEL device.",0,[[["self"]],["version"]]],[11,"enable_l2_cache","","Enables the L2 cache.",0,[[["self"]],["result",["error"]]]],[11,"get_stack_info","","Gets stack information.",0,[[["self"]],["result",["error"]]]],[11,"default_mmu_translation_table","","Generates a default MMU translation table.",0,N],[11,"backup_and_disable_mmu","","Backup MMU translation table and disable it.",0,[[["self"]],["result",["option","error"]]]],[11,"restore_and_enable_mmu","","",0,N],[11,"get_ttbr0","","Gets the `TTBR0` register.",0,[[["self"]],["result",["u32","error"]]]],[11,"set_ttbr0","","Sets the `TTBR0` register to the given value.",0,[[["self"],["u32"]],["result",["error"]]]],[11,"get_ttbcr","","Gets the `TTBCR` register.",0,[[["self"]],["result",["u32","error"]]]],[11,"set_ttbcr","","Sets the `TTBCR` register to the given value.",0,[[["self"],["u32"]],["result",["error"]]]],[11,"get_dacr","","Gets the `DACR` register.",0,[[["self"]],["result",["u32","error"]]]],[11,"set_dacr","","Sets the `DACR` register to the given value.",0,[[["self"],["u32"]],["result",["error"]]]],[11,"get_sctlr","","Gets the `SCTLR` register.",0,[[["self"]],["result",["u32","error"]]]],[11,"set_sctlr","","Sets the `SCTLR` register to the given value.",0,[[["self"],["u32"]],["result",["error"]]]],[11,"read_arm_cp_reg","","Reads the given ARM register.",0,[[["self"],["u32"],["u32"],["u32"],["u32"],["u32"]],["result",["u32","error"]]]],[11,"write_arm_cp_reg","","Writes the given value to the given ARM register.",0,[[["self"],["u32"],["u32"],["u32"],["u32"],["u32"],["u32"]],["result",["error"]]]],[11,"read_sid","","Reads the SID from the SoC if it has one.",0,[[["self"]],["result",["option","error"]]]],[11,"read_words","","Read words chunk from the FEL device memory.",0,N],[11,"write_words","","Write words chunk to the FEL device memory.",0,N],[11,"read_words_chunk","","Read words chunk from the FEL device memory.",0,N],[11,"write_words_chunk","","Write words chunk to the FEL device memory.",0,N],[11,"rmr_request","","Perform FEL RMR request.",0,[[["self"],["u32"],["bool"]],["result",["error"]]]],[11,"deref","","",0,[[["self"]],["usbhandle"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"from_device","","Creates a USB handle from the given device.",1,[[["device"]],["result",["usbhandle","error"]]]],[11,"claim","","Claim the given device.",1,[[["self"],["device"]],["result",["error"]]]],[11,"get_endpoints","","Updates the endpoints of the USB handle.",1,[[["self"],["device"]],["result",["error"]]]],[11,"fel_fill","","Fill memory at the given offset.",1,[[["self"],["u32"],["u32"],["u8"]],["result",["error"]]]],[11,"fel_read","","Reads from the FEL device memory at the given offset.",1,N],[11,"fel_write","","Writes to the FEL device memory at the given offset.",1,N],[11,"fel_execute","","Makes the FEL device execute the code at the given address.",1,[[["self"],["u32"]],["result",["error"]]]],[11,"get_fel_version","","Gets the SoC version information.",1,[[["self"]],["result",["version","error"]]]],[11,"read_fel_status","","Reads the FEL status.",1,[[["self"]],["result",["error"]]]],[11,"send_fel_request","","Sends a FEL request.",1,[[["self"],["u32"],["u32"],["u32"]],["result",["error"]]]],[11,"usb_read","","Reads the given data from the USB.",1,N],[11,"usb_write","","Writes the given data to the USB.",1,N],[11,"send_usb_request","","Sends the request type USB request.",1,[[["self"],["u16"],["u32"]],["result",["error"]]]],[11,"read_usb_response","","Reads and discards the USB response. It will check if the response is correct.",1,[[["self"]],["result",["error"]]]],[11,"usb_bulk_send","","Sends data to the USB in bulk.",1,N],[11,"usb_bulk_recv","","Receives data from the USB in bulk.",1,N],[11,"drop","","",1,[[["self"]]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"new","","Creates a new Fel object.",2,[[],["result",["error"]]]],[11,"get_device","","Get the device from the given bus and address, if it exists and is a FEL device.",2,[[["self"],["u8"],["u8"]],["result",["option","error"]]]],[11,"list_devices","","Creates a list of Allwinner devices in Fel mode.",2,[[["self"]],["result",["vec","error"]]]]],"paths":[[3,"FelHandle"],[3,"UsbHandle"],[3,"Fel"],[4,"FelError"],[3,"Version"],[3,"SRAMSwapBuffers"],[3,"Info"],[4,"UbootImageType"]]};
initSearch(searchIndex);
